//! Each new term in the Fibonacci sequence is generated by adding the previous two terms.
//! By starting with 1 and 2, the first 10 terms will be:
//!
//! 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
//!
//! By considering the terms in the Fibonacci sequence whose values do not exceed four million,
//! find the sum of the even-valued terms.
//!
//! ```
//! cargo build --release && time ./target/release/euler_002
//!    Compiling euler_rust v0.1.0 (/Users/woodnt/Code/src/github.com/woodm1979/euler_rust)
//!     Finished release [optimized] target(s) in 0.13s
//! Sum: 4613732
//!
//! real	0m0.086s
//! user	0m0.001s
//! sys	0m0.001s
//! ```

use euler_rust::fibonacci::Fibonacci;

fn main() {
    // let max: u32 = 10;
    let max: u64 = 4000000;

    let seq = Fibonacci::new()
        .take_while(|i| i < &max)
        .filter(|i| i & 1 == 0);

    // let seq: Vec<_> = seq.collect();
    // println!("{:?}", seq);

    let sum: u64 = seq.into_iter().sum();
    println!("Sum: {}", sum);
}
