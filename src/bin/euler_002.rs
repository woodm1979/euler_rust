// Each new term in the Fibonacci sequence is generated by adding the previous two terms.
// By starting with 1 and 2, the first 10 terms will be:
//
// 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
//
// By considering the terms in the Fibonacci sequence whose values do not exceed four million,
// find the sum of the even-valued terms.

// cargo build --release && time ./target/release/euler_002
//    Compiling euler_rust v0.1.0 (/Users/woodnt/Code/src/github.com/woodm1979/euler_rust)
//     Finished release [optimized] target(s) in 0.13s
// Sum: 4613732
//
// real	0m0.086s
// user	0m0.001s
// sys	0m0.001s

struct Fibo {
    first: u32,
    second: u32,
    max: u32,
}

impl Fibo {
    fn new(max: u32) -> Fibo {
        Fibo {
            first: 0,
            second: 1,
            max,
        }
    }
}

impl Iterator for Fibo {
    type Item = u32;

    fn next(&mut self) -> Option<Self::Item> {
        if self.first < self.max {
            let old_first = self.first;
            self.first = self.second;
            self.second = old_first + self.second;
            Some(old_first)
        } else {
            None
        }
    }
}

fn main() {
    // let max: u32 = 10;
    let max: u32 = 4000000;

    let seq = Fibo::new(max).filter(|i| i & 1 == 0);

    // let seq: Vec<_> = seq.collect();
    // println!("{:?}", seq);

    let sum: u32 = seq.into_iter().sum();
    println!("Sum: {}", sum);
}
